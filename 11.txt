#include "stdafx.h"
#include <stdio.h>
#include <limits.h>
#include <windows.h>
#include <time.h>
#include <stdlib.h>
#define _CRT_SECURE_NO_WARNINGS

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    int n, **G = NULL, *deg = NULL;
    int size = 0;
    printf("Введите количество вершин: ");
    scanf("%d", &n);

    deg = (int*)malloc(n * sizeof(int));
    G = (int**)malloc(n * sizeof(int*));

    for (int i = 0; i < n; i++) {
        deg[i] = 0;
        G[i] = (int*)malloc(n * sizeof(int));
    }

    // Initialize the adjacency matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            G[i][j] = rand() % 2; // Randomly create edges
        }
    }

    printf("\nМатрица смежности G:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", G[i][j]);
        }
        printf("\n");
    }

    // Calculate the degree of each vertex
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            deg[i] += G[i][j];
        }
    }

    printf("\nСтепени вершин:\n");
    for (int i = 0; i < n; i++) {
        printf("Вершина %d: %d\n", i, deg[i]);
    }

    // Identify isolated, terminal, and dominating vertices
    for (int i = 0; i < n; i++) {
        if (deg[i] == 0) {
            printf("Вершина %d изолированная\n", i);
        } else if (deg[i] == 1) {
            printf("Вершина %d конечная\n", i);
        } else if (deg[i] == n - 1) {
            printf("Вершина %d доминирующая\n", i);
        }
    }

    // Free allocated memory
    for (int i = 0; i < n; i++) {
        free(G[i]);
    }
    free(G);
    free(deg);

    getchar();
    getchar();
    return 0;
}
